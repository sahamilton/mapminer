
Good Queries
/**************************************************************************************/
/ ****************  Dead Leads                                                  *******/
/**************************************************************************************/
select branches.branchname, 
leadsources.source, 
count(address_branch.address_id) as deadleads
from leadsources, branches, addresses, address_branch
left join opportunities on address_branch.id = opportunities.address_branch_id
left join activities on address_branch.address_id = activities.address_id
where address_branch.address_id = addresses.id
and address_branch.branch_id = branches.id
and addresses.lead_source_id = leadsources.id
and addresses.lead_source_id != 4
and address_branch.created_at < '2019-06-01'
and opportunities.id is null
and activities.id is null
group by branches.branchname, leadsources.source

/**************************************************************************************/
/*********************** Open but Closed opportunities ********************************/
/**************************************************************************************/
select branchname, concat_ws(' ', persons.firstname, persons.lastname), concat_ws(' ', b.firstname, b.lastname) as createdby,  addresses.businessname, opportunities.title, opportunities.created_at, actual_close
from branches, branch_person, addresses, opportunities, persons, persons b

where opportunities.closed = 0
and opportunities.actual_close is not null
and opportunities.branch_id = branches.id
and branches.id = branch_person.branch_id
and branch_person.role_id = 9
and branch_person.person_id = persons.id
and opportunities.user_id = b.user_id
and opportunities.address_id = addresses.id
order by branches.id

/*********************************************************************
/**************** Stale Opportunities ********************************
/*********************************************************************
select branchname, count(opportunities.id) 
from branches, opportunities 
where branches.id = opportunities.branch_id 
and opportunities.closed = 0 and 
opportunities.created_at <= DATE_FORMAT( CURRENT_DATE - INTERVAL 3 MONTH, '%Y/%m/%d' ) 
group by branchname

/************ expected close - 3 months ago
select branchname, count(opportunities.id) 
from branches, opportunities 
where branches.id = opportunities.branch_id 
and opportunities.closed = 0 and 
opportunities.expected_close <= DATE_FORMAT( CURRENT_DATE - INTERVAL 3 MONTH, '%Y/%m/%d' ) 
group by branchname

/************* with no activities
SELECT branchname, count(opportunities.id)
from branches, opportunities
LEFT JOIN activities 
ON activities.address_id = opportunities.address_id
AND activities.activity_date <= DATE_FORMAT( CURRENT_DATE - INTERVAL 1 MONTH, '%Y/%m/%d' )
where branches.id = opportunities.branch_id
and opportunities.created_at <= DATE_FORMAT( CURRENT_DATE - INTERVAL 2 MONTH, '%Y/%m/%d' )
and opportunities.closed = 0
and activities.activity_date is null
group by branchname

/**************************************************************************************/
/****************** Get count of Branch opportunities by month                 ********/
/**************************************************************************************/
SELECT branch_id, 
COUNT(IF(created_at <= DATE_SUB(NOW(), INTERVAL 1 month), 1, null)) AS month, 
COUNT(IF(created_at <= DATE_SUB(NOW(), INTERVAL 2 month), 1, null)) AS 2month,
COUNT(IF(created_at <= DATE_SUB(NOW(), INTERVAL 3 month), 1, null)) AS 3month,
COUNT(IF(created_at <= DATE_SUB(NOW(), INTERVAL 4 month), 1, null)) AS 4month,
COUNT(IF(created_at <= DATE_SUB(NOW(), INTERVAL 5 month), 1, null)) AS 5month,
COUNT(IF(created_at <= DATE_SUB(NOW(), INTERVAL 6 month), 1, null)) AS 6month
from opportunities
where opportunities.closed = 0
group by branch_id


/**************************************************************************************/
/********************* Old Open Opportunities past Expected Close  ********************/
/**************************************************************************************/

select branchname, branches.id, concat_ws(' ', b.firstname, b.lastname) as BM, concat_ws(' ', m.firstname, m.lastname) as MM, addresses.businessname,opportunities.title, opportunities.created_at, opportunities.value, opportunities.expected_close
from opportunities, branches, addresses, persons b, persons m, branch_person
where opportunities.expected_close < '2019-12-01'
and opportunities.closed = 0
and opportunities.address_id = addresses.id
and opportunities.branch_id = branches.id
and branches.id = branch_person.branch_id
and branch_person.role_id = 9
and branch_person.person_id = b.id
and b.reports_to = m.id

/**************************************************************************************/

SELECT branch_id,count(*)
FROM `opportunities` 
where
closed = 1
and actual_close  between date('2019-04-01') and date('2019-04-08')
group by branch_id;

/**************************************************************************************/ 
/***********  Get all branch activities grouped by week, activity type & branch  ******/
/**************************************************************************************/

select  a.branchname,
         concat_ws(' ',firstname,lastname) as manager, 
         STR_TO_DATE(concat(CAST(week AS CHAR),' Monday'),'%X%V %W') as weekbegin, 
         a.activity, 
         a.activitycount
        from persons, branch_person, branches, 
        (
            select branchname, 
            concat(YEAR(activity_date),
            WEEK(activity_date)) as week,
            activity, count(activities.id) as activitycount
            from activities, branches, activity_type 
            where activities.activity_date between '2019-07-01'  and '2019-07-31' 
            and activities.activitytype_id = activity_type.id 
            and activities.completed =1 
            and branch_id = branches.id
            group by branchname, week, activity ) a
          where persons.id = branch_person.person_id
          and branch_person.role_id = 9
          and branch_person.branch_id = branches.id
          and branches.branchname = a.branchname  
          ORDER BY `a`.`week`  ASC

/**************************************************************************************/

/**************************************************************************************/

SELECT branch_id,count(*)
FROM `activities` 
where
activitytype_id = 4
and activity_date  between date('2019-04-01') and date('2019-04-08')
group by branch_id;

/**************************************************************************************/
/***************** Open Opportunities Aging                                     *******/
/**************************************************************************************/

select count(id) as open, 
round(datediff( now(), created_at) / 7)) as weeks, 
branch_id from opportunities 
where opportunities.closed is null or opportunities.closed = 0 
group by branch_id, weeks ORDER BY `branch_id`, weeks

/**************************************************************************************/
/*****************  Weekly Report                                               *******/
/**************************************************************************************/
select branches.id,branches.branchname, a.salesmeetings,b.opportunitieswon,b.value 
from branches

left join 
(select branch_id, count(activities.id) as salesmeetings 
 from activities 
 where activities.activitytype_id = 4 
 and activities.activity_date between date('2019-04-01') 
 and date('2019-04-14') 
 group by activities.branch_id) a 
 
 on branches.id = a.branch_id
 
 left join (
     select opportunities.branch_id, count(opportunities.id) as opportunitieswon,sum(value) as value 
     from opportunities 
     where opportunities.closed = 1 
     and opportunities.actual_close between date('2019-04-01') 
     and date('2019-04-14') 
     group by opportunities.branch_id) b 
     
     on branches.id = b.branch_id  
ORDER BY `b`.`opportunitieswon`  DESC 

/**************************************************************************************/

/**************************************************************************************/

insert ignore into address_branch 
(address_id,branch_id, top50)
select distinct address_id,branch_id,top50
from opportunities 
where opportunities.address_branch_id =0

/**************************************************************************************/

/**************************************************************************************/

update opportunities,address_branch
set opportunities.address_branch_id = address_branch.id
where opportunities.address_id = address_branch.address_id
and opportunities.branch_id = address_branch.branch_id
and opportunities.address_branch_id = 0

/**************************************************************************************/

/**************************************************************************************/

update opportunities, address_branch,activities
set closed = 2 where activities.activitytype_id = 9
and opportunities.address_branch_id = address_branch.id
and address_branch.address_id = activities.address_id

/**************************************************************************************/

/**************************************************************************************/

SELECT addresses.id, businessname, addresses.street,addresses.city,addresses.state,branches.id as branchid,branchname, ST_Distance_Sphere(branches.position,addresses.position, 40233) * 000623  as distance
FROM `addresses`,address_branch,branches
where addresses.id = address_branch.address_id 
and address_branch.branch_id = branches.id
and branches.id in (1115,1149,1150,2254,2255,2702,2751,2752,2753,2961)
ORDER BY addresses.id, distance asc

/**************************************************************************************/
/**********  Set SRID                                                  ***************/
/**************************************************************************************/

//update addresses set position = POINT(lng, lat);
update addresses set position = ST_GeomFromText(ST_AsText(POINT(lng, lat)), 4326);
//update branches set position = POINT(lat, lng);
update branches set position = ST_GeomFromText(ST_AsText(POINT(lng, lat)), 4326);
//update persons set position = POINT(lat, lng);
update persons set position = ST_GeomFromText(ST_AsText(POINT(lng, lat)), 4326);

/**************************************************************************************/

/**************************************************************************************/
select addresses.id, addresses.businessname, concat_ws(' ',addresses.street,addresses.city,addresses.state) as fullAddress,addresses.lat,addresses.lng,branches.id,branches.branchname,branches.lat,branches.lng,
ST_Distance_Sphere(addresses.position,branches.position, 40233) * .000623 AS distance
from addresses,address_branch, branches
where addresses.id = address_branch.address_id
and address_branch.branch_id in ('1506','1518','1522','1525','1552','1589')

/**************************************************************************************/
?????
/**************************************************************************************/
select branches.id,branchname, slc( 40.716743, -73.951368, branches.lat, branches.lng) as distance_in_meters,  astext(branches.position) 
from branches,addresses_import
where MBRContains(envelope(linestring(point(addresses_import.max(lng), addresses_import.max(lat)), point(addresses_import.min(lng), addresses_import.min(lat))), branches.position) 
order by distance_in_meters limit 10

/**************************************************************************************/

/**************************************************************************************/

SELECT 
       CONCAT('LINESTRING(',
              max(lat)-0.5,' ',min(lng)-0.5,
              ',', 
              min(lat)+0.5 ,' ',max(lng) +0.5,
              ')') AS box
   FROM addresses_import

/**************************************************************************************/

/**************************************************************************************/
   SELECT *
  FROM branches
 WHERE MBRContains(
        GeomFromText( envelope('LINESTRING(33.20434400000000 -118.47817100000000,34.09832500000000 -117.35715400000000)') ),
       	POINT(lng, lat))

/**************************************************************************************/

/**************************************************************************************/

select persons.user_id,  activities.id
from persons,branch_person,address_branch,activities
where persons.id = branch_person.person_id
and branch_person.role_id = 9
and branch_person.branch_id = address_branch.branch_id
and address_branch.address_id = activities.address_id
and activities.user_id = 0;

/**************************************************************************************/

/**************************************************************************************/

SELECT activities.id, persons.user_id 
FROM `activities`,address_branch,branch_person,persons 
WHERE activities.user_id =0 and activities.address_id = address_branch.address_id 
and address_branch.branch_id = branch_person.branch_id 
and branch_person.person_id = persons.id

/**************************************************************************************/

/**************************************************************************************/
insert into activities

(`activity_date`,`activitytype_id`,`address_id`,`branch_id`,`user_id`,`relatedActivity`,`created_at`,`note`)
select * from (SELECT
          `followup_date`,'12',`address_id`,`branch_id`,`user_id`,`id`,`created_at`, concat_ws(' ','----',note,'----') from activities where followup_date is not null) b;


update`activities` set completed = 1 WHERE activity_date < '2019-03-30';

/**************************************************************************************/
/***************** get closed won opportunities by branch / date        ***************/
/**************************************************************************************/

SELECT branch_id,DATE_FORMAT(actual_close, '%Y/%m/%d') as dateclosed, count(id) 
FROM `opportunities` 
WHERE actual_close is not null
and actual_close between cast('2019-01-01' as date) and cast('2019-03-31' as date)
group by branch_id,dateclosed

/**************************************************************************************/
/*************** Get sales appt activities by branch / date                 ***********/
/**************************************************************************************/

SELECT address_branch.branch_id as branch,DATE_FORMAT(activity_date, '%Y/%m/%d') as activitydate, count(activities.id) 
FROM `activities` , address_branch
WHERE activity_date between cast('2019-01-01' as date) and cast('2019-03-31' as date)
and activitytype_id =4
and activities.address_id = address_branch.address_id
group by branch,activitydate

/**************************************************************************************/
/******************* Get all opportunities, activities, contacts for branch ***********/
/**************************************************************************************/

select addresses.id as aid, addresses.businessname,addresses.street,addresses.city,addresses.state,addresses.zip,addresses.phone,addresses.lat,addresses.lng, 
address_branch.id as abid,
opportunities.id as oppid, opportunities.description,opportunities.comments,opportunities.expected_close,opportunities.closed, opportunities.top50,opportunities.value,opportunities.requirements,opportunities.actual_close,opportunities.duration, 
activities.id as actid, activities.activity_date,activities.activitytype_id,activities.followup_date,activities.note, 
contacts.id as cid, contacts.fullname,contacts.firstname,contacts.lastname,contacts.title,contacts.contactphone,contacts.email 
from addresses,address_branch 
left join opportunities on address_branch.id = opportunities.address_branch_id 
left join activities on address_branch.address_id = activities.address_id 
left join contacts on address_branch.address_id = contacts.address_id where address_branch.branch_id = 7383 
and address_branch.address_id = addresses.id


****************************************************
KPI's
****************************************************
// branch_id   leads   opportys  leadconv  lagdays   velocitydays  avgdeal  won

select address_branch.branch_id,
count(address_branch.id) as leads,
count(b.id) + count(c.id) + count(d.id) as opptys,
count(a.id) / count(address_branch.id) as conv,
avg(datediff(a.created_at, address_branch.created_at)) as lagdays,
avg(datediff(a.actual_close, a.created_at)) as velocitydays,
avg(a.value) as avgdeal,
count(b.id) as open,
count(c.id) as won,
count(d.id) as lost,
count(c.id) / (count(c.id) + count(d.id)) as winratio
from address_branch

left join opportunities a on address_branch.id = a.address_branch_id
left join opportunities b on address_branch.id = b.address_branch_id and b.closed = 0
left join opportunities c on address_branch.id = c.address_branch_id and c.closed = 1
left join opportunities d on address_branch.id = d.address_branch_id and d.closed = 2
where address_branch.created_at > '2019-03-01'
//where address_branch.branch_id in ()
group by address_branch.branch_id

/**************************************************************************************/
select branchname,count(opportunities.id),count(opportunities.top50)
from branches,opportunities
where branches.id = opportunities.branch_id
and opportunities.closed = 0
group by branchname

/**************************************************************************************/
/****************  Eloquent query                                     *****************/
/**************************************************************************************/

branch::whereHas(opportunities,function($q){
  $q->where('closed','=',0);
})->select('branchname', DB::raw('count(opportunities.id) as open,count(opportunities.top50 as top50'))->groupBy('branchname')->get();

/**************************************************************************************/
/***   Get random addresses
/**************************************************************************************/
SELECT @min := MIN(id), @max := MAX(id) FROM addresses;
SELECT DISTINCT id, businessname, street, address2, city, state, zip, lat, lng FROM addresses AS a JOIN ( SELECT FLOOR(@min + (@max - @min + 1) * RAND()) AS id FROM addresses LIMIT 50 -- more than 10 (to compensate for dups) ) b USING (id) LIMIT 25

/**************************************************************************************/
Check if branch managers report to the branches MM
/**************************************************************************************/
SELECT a.branch_id, 
    concat_ws(' ', c.firstname, c.lastname) as 'Branch Manager', 
    concat_ws(' ', e.firstname, e.lastname) as 'Reports to Manager',
    concat_ws(' ', f.firstname, f.lastname) as 'Who Reports',
    concat_ws(' ', d.firstname, d.lastname) as 'Branch MM',
    concat_ws(' ', g.firstname, g.lastname) as 'Who Reports'
    
from persons c, persons d, persons e, persons f, persons g, branch_person a

left join branch_person b
on a.branch_id = b.branch_id

where a.role_id = 9
and c.deleted_at is null
and d.deleted_at is null
and b.role_id = 3
and a.person_id = c.id
and b.person_id != c.reports_to
and b.person_id = d.id
and c.reports_to = e.id
and e.reports_to = f.id
and d.reports_to = g.id

/**************************************************************************************/            
/**************** Open Opportunities with no expected close date            ***********/
/**************************************************************************************/
select branches.id, branchname, concat_ws(' ', firstname, lastname), title, value, opportunities.created_at
from opportunities, branches, persons, branch_person
where opportunities.expected_close = null
and opportunities.closed = 0
and opportunities.branch_id = branches.id
and branches.id = branch_person.branch_id
and branch_person.role_id = 9
and branch_person.person_id = persons.id
and persons.deleted_at is null


/**************************************************************************************/
/************************ Find branches with multiple managers              ***********/
/**************************************************************************************/
SELECT branch_id, count(person_id) as COUNT 
FROM `branch_person`, persons 
WHERE role_id = 9 
and persons.id = person_id 
and persons.deleted_at is null 
group by branch_id 
having count >1


/**************************************************************************************/
/************  Get leads with no activities or opportunities for region  **************/
/**************************************************************************************/
SELECT addresses.*, address_branch.branch_id, leadsources.source 
FROM `addresses`, leadsources, address_branch 
left join activities on address_branch.address_id = activities.address_id 
left join opportunities on address_branch.id = opportunities.address_branch_id WHERE addresses.lead_source_id = leadsources.id 
and address_branch.address_id = addresses.id 
and address_branch.branch_id in (1711, 1702, 1701, 1719, 1707, 1713, 1788, 3024, 1754, 1752, 1780, 2924, 1750, 1742, 1751, 2855, 1749, 1770, 1771, 2852, 7250, 1753, 1740, 1756, 8026, 2898, 2928, 8064, 2861, 1767, 1807, 1852, 1459, 2814, 1746, 1806, 2931, 1802, 2643, 1794, 1748, 1808, 1460) 
and activities.id is null 
and opportunities.id is null

/**************************************************************************************/
/************ REmoved from branch.php Calculate bounding box coordinates **************/
/**************************************************************************************/
   

    
    private function _getPositionCoordinates($lat, $lng, $distance)
    {
        

        $coordinates['lat']= $lat;
        $coordinates['lon'] = $lng;
        $coordinates['dist'] = $distance;
        $location = Geolocation::fromDegrees($lat, $lng);
        $box = $location->boundingCoordinates($distance, 'mi');

        $coordinates['rlon1'] = $box['min']->degLon;
        $coordinates['rlon2'] = $box['max']->degLon;
        $coordinates['rlat1'] = $box['min']->degLat;
        $coordinates['rlat2'] = $box['max']->degLat;
    
        return $coordinates;
    }
    */
/**************************************************************************************/   
/* Details of opportunties
/**************************************************************************************/
   select branch_id, branchname, businessname, title, opportunities.created_at, duration, requirements, value, expected_close
from opportunities, branches, addresses
where closed =0
and expected_close > '2019-09-15'
and opportunities.branch_id = branches.id
and opportunities.address_id = addresses.id
order by branch_id

/**************************************************************************************/
/************** Companies with location count
/**************************************************************************************/
SELECT companies.id, companyname,  type, count(addresses.id) as locations
FROM `companies`, accounttypes, addresses
WHERE accounttypes_id = accounttypes.id
and companies.id = addresses.company_id
group by companies.id, companyname, type
order by companyname

/**************************************************************************************/
/* get activities of user
/**************************************************************************************/
select addresses.id, businessname, activity, activity_date, opportunities.id, opportunities.title
from  addresses, activity_type, activities
left join opportunities on activities.address_id = opportunities.address_id
where activities.user_id = 3693
and activities.completed = 1 
and activities.address_id = addresses.id
and activities.activitytype_id = activity_type.id

/**************************************************************************************/
/** debugging reports
/**************************************************************************************/
select activities.id, activity_date, address_id, activities.created_at, user_id, activity
from activities, activity_type
where branch_id = 1509  
and completed = 1
and activities.created_at > '2019-11-20'
and activities.created_at < '2019-11-21'
and activities.activitytype_id = activity_type.id


 */
/**************************************************************************************/
/********************  Spatial duplicates query                                  ******/
/**************************************************************************************/
select addresses_import.id as id, addresses.id as import_ref 
from addresses,addresses_import 
where addresses.company_id = addresses_import.company_id 
and addresses_import.company_id = 388 
and ST_Distance_Sphere(addresses.position,addresses_import.position, 40233) < 50

/**************************************************************************************/
/*

/**************************************************************************************/
SELECT 
    a.businessname,
    COUNT(a.id) 
    FROM addresses a, addresses b
    left join address_branch on b.id = address_branch.address_id
    where a.company_id = 388 
    and a.company_id = b.company_id
    and ST_Distance_Sphere(a.position, b.position, 40233) < 50
    and address_branch.address_id is null
GROUP BY a.businessname
HAVING COUNT(a.id) > 1
Order By count(a.id) DESC;

/**************************************************************************************/
/**** delete addresses without address_branch
/**************************************************************************************/
delete addresses, address_branch 
from addresses 
left join address_branch on addresses.id = address_branch.address_id 
where addresses.company_id = 388 
and address_branch.address_id is null

/**************************************************************************************/
/*************** Closest Sales Reps                                          **********/
/**************************************************************************************/
select 
    addresses.id,
    addresses.businessname,
    addresses.street as addressestreet, 
    addresses.city as loccity, 
    addresses.state as addressestate,
    addresses.zip as loczip,
    persons.id as pid,
    users.employee_id,
    concat_ws(' ',persons.firstname,persons.lastname) as repname,
    persons.phone,
     3956 * acos(cos(radians(addresses.lat)) 
            * cos(radians(persons.lat)) 
            * cos(radians(persons.lng) 
            - radians(addresses.lng)) 
            + sin(radians(addresses.lat)) 
            * sin(radians(persons.lat))) as distance
    from addresses, persons, role_user, users
    where addresses.company_id = 38
    and persons.user_id = role_user.user_id
    and role_user.role_id = 5
    and persons.user_id = users.id
  // add if within certain distance
    and
            3956 * acos(cos(radians(addresses.lat)) 
            * cos(radians(persons.lat)) 
            * cos(radians(persons.lng) 
            - radians(addresses.lng)) 
            + sin(radians(addresses.lat)) 
            * sin(radians(persons.lat))) < 25

//*************
SELECT a.code, a.distance
FROM   places a
INNER JOIN
(
    SELECT   code, MIN(distance) AS mindistance
    FROM     places
    GROUP BY code
) b ON a.code = b.code AND a.distance = b.mindistance

ORDER BY a.distance

/**************************************************************************************/
/*************** Declined leads                                                 ******/
/**************************************************************************************/
select companyname, businessname, branchname, address_branch.comments
from companies, addresses, branches, address_branch
where address_branch.status_id =4
and address_branch.address_id = addresses.id
and addresses.company_id = companies.id
and address_branch.branch_id = branches.id

/**************************************************************************************/
/*************** Closest branches to company locations        OLD                ******/
/**************************************************************************************/
select addresses.id,addresses.street, addresses.city, addresses.state,branches.id, branchname,branches.city,branches.state,
(3956 * acos(cos(radians(addresses.lat)) 
                     * cos(radians(branches.lat)) 
                     * cos(radians(branches.lng) 
                     - radians(addresses.lng)) 
                     + sin(radians(addresses.lat)) 
                     * sin(radians(branches.lat)))) as branchdistance
from addresses
left join branches on 
                   (3956 * acos(cos(radians(addresses.lat)) 
                     * cos(radians(branches.lat)) 
                     * cos(radians(branches.lng) 
                     - radians(addresses.lng)) 
                     + sin(radians(addresses.lat)) 
                     * sin(radians(branches.lat)))) < 25
where addresses.company_id = 388
order by addresses.id, branchdistance
/**************************************************************************************/
/*************** Closest branches to company locations        OLD                ******/
/**************************************************************************************/

select 
    addresses.id,
    addresses.businessname,
    addresses.street as addressestreet, 
    addresses.city as loccity, 
    addresses.state as addressestate,
    addresses.zip as loczip,
    branches.id as bid,
    branches.branchname,
    ST_DISTANCE_SPHERE(branches.position, addresses.position) * .0.00062137119 as distance
    from addresses, branches
    where addresses.company_id = 38
    and
    ST_DISTANCE_SPHERE(branches.position, addresses.position)  *0.0.00062137119 < 25
    order by addresses.id asc, distance asc

/**************************************************************************************/
/*************** Closest branches to company locations        OLD                ******/
/**************************************************************************************/
select 
    addresses.id,
    addresses.businessname,
    addresses.street as addressestreet, 
    addresses.city as loccity, 
    addresses.state as addressestate,
    addresses.zip as loczip,
    branches.id as bid,
    branches.branchname,
    branches.street,
    branches.city,
    branches.state,
    st_distance_sphere(point(branches.lng, branches.lat), point(addresses.lng, addresses.lat)) *.00062137119 as distance

    from addresses, branches
    where addresses.company_id = 38
    and
    ST_DISTANCE_SPHERE(branches.position, addresses.position) * .00062137119 < 25 
    order by addresses.id asc, distance asc

/**************************************************************************************/
/*************** Closest branches to unallocated company locations  New          ******/
/**************************************************************************************/
select 
    a.id,
    b.id,
    st_distance_sphere(a.position, b.position)  * 0.00062137119 dist 
from addresses a
left join address_branch on a.id = address_branch.address_id
inner join branches b
    on b.id = (
        select b1.id
        from branches b1,  branch_serviceline s
        where st_distance_sphere(a.position, b1.position, 40233) * 0.00062137119 < b1.radius
        and b1.id = s.branch_id
        and s.serviceline_id in (5)
        order by st_distance_sphere(a.position, b1.position) 
        limit 1
    )
where a.company_id in (388)
and address_branch.address_id is null

// Duplicates
    select a1.id, businessname, street, city, state, zip
    from 
    addresses a1, address_branch 
    where position in 
      (
        select * from 
        (
          select  a.position, count(a.id) as duplicate
          from addresses a, 
          addresses b, address_branch
          where a.position = b.position
          and a.id = address_branch.address_id
          and b.id = address_branch.address_id
          and address_branch.branch_id = 2255
          group by a.position
          having duplicate  > 1
        )  z 
      )
    and a1.id = address_branch.address_id
    and address_branch.branch_id = 2255
    order by position


select * from addresses, address_branch where addresses.id = address_branch.address_id and address_branch.branch_id = 2255 and position = (select position from addresses where id = 679227)

public function duplicate(Address $address) {
  return $this->whereHas(
    'assignedToBranch', function ($q) {
      $q->where('branches.id', 2255);
    }
  )->where('position', function ($q) use($address){
        $q->from('addresses')->select('position')->where('addresses.id', '=', $address);
    }
  )->get();
}

  $address = Address::whereHas('assignedToBranch', function ($q) { $q->where('branches.id', 2255);})->where('position','=', function ($q) { $q->from('addresses')->select('position')->where('addresses.id', 6679227);})->count();

$data= User::from('User as u')
         ->select('distinct u.name')
         ->join('Member as m','u.id','m.userId')
         ->whereRaw('u.name is not null')
         ->get();


select addresses.*
FROM addresses
   INNER JOIN (SELECT 
              addresses.id as id,
               st_distance_sphere(a.position, b.position)  * 0.00062137119 dist,

               FROM   addresses a, branches b, address_branch
               where addresses.id = address_branch.address_id
               and address_branch.branch_id = 4489
               GROUP  BY dist
               HAVING COUNT(dist) > 1) dup
           ON addresses.id = dup.id;

/***************************************************************************************/
/****************** get count of leads by branch to be allocated ***********************/
/***************************************************************************************/

select 
    count(a.id),
    b.id
    
from addresses a
left join address_branch on a.id = address_branch.address_id
inner join branches b
    on b.id = (
        select b1.id
        from branches b1
        where st_distance_sphere(a.position, b1.position) * 0.00062137119 < 25 
        order by st_distance_sphere(a.position, b1.position) 
        limit 1
    )
where a.company_id = 388
and address_branch.address_id is null
group by b.id

/***************************************************************************************/
/********************************                           ****************************/
/***************************************************************************************/

SELECT id, type, rate
FROM
( ( SELECT id, type, rate, 25-rate AS diff
    FROM rates
    WHERE type = 'A'
      AND rate < 25
    ORDER BY rate DESC
      LIMIT 3
  ) 
  UNION ALL
  ( SELECT id, type, rate, rate-25 AS diff
    FROM rates
    WHERE type = 'A'
      AND rate >= 25
    ORDER BY rate ASC
      LIMIT 3
  ) 
) AS tmp
ORDER BY diff
LIMIT 3 ;

/**************************************************************************************/
/*****  Asssign personal leads to branch where not linked                        ******/
/**************************************************************************************/

insert into address_branch (address_id, branch_id, status_id) 
SELECT addresses.id, branch_person.branch_id, 2
FROM persons, branch_person, addresses
left join address_branch
on addresses.id = address_branch.address_id
where addresses.lead_source_id = 4
and address_branch.address_id is null
and addresses.user_id is not null
and addresses.user_id = persons.user_id
and persons.id = branch_person.person_id
and branch_person.role_id =9

/**************************************************************************************/
/*****       Assign personal leads to branch where not linked, originator        ******/
/*****  no longer with Co but has activities                                     ******/
/**************************************************************************************/
USE mapminer;
insert into address_branch
(address_id, branch_id, status_id)
select distinct addresses.id, activities.branch_id, 2
from activities, addresses
left join address_branch on addresses.id = address_branch.address_id
where address_branch.address_id is null
and addresses.lead_source_id = 4
and addresses.id = activities.address_id

/**************************************************************************************/
/***** Summary of opportunities by branch and quarter                            ******/
/**************************************************************************************/

SELECT branchname, concat_ws("-",YEAR(opportunities.created_at), QUARTER(opportunities.created_at)) as Qtr, count(opportunities.id)
FROM `opportunities` , branches

WHERE opportunities.created_at < '2020-01-01'
and branch_id = branches.id
group by branchname, concat_ws("-",YEAR(opportunities.created_at), QUARTER(opportunities.created_at))
order by branchname

/**************************************************************************************/
/***** Summary of activities by branch and quarter                               ******/
/**************************************************************************************/

SELECT branchname, concat_ws("-",YEAR(activity_date), QUARTER(activity_date)) as Qtr, count(activities.id)
FROM `activities` , branches

WHERE activities.activity_date between '2019-01-01' and '2019-012-31'
and branch_id = branches.id
and activities.completed = 1
group by branchname,concat_ws("-",YEAR(activity_date), QUARTER(activity_date))
order by branchname

/**************************************************************************************/
/***** Get all related leads, activities and opportunities of a branch (closing) ******/
/**************************************************************************************/

SELECT branches.branchname,
addresses.id, addresses.businessname, addresses.street, addresses.city, addresses.state,
activities.activity_date, activities.completed, activities.note,
opportunities.title, opportunities.description, opportunities.requirements, opportunities.duration
FROM `addresses`, branches, address_branch
left join activities on address_branch.address_id = activities.address_id
left join opportunities on address_branch.id = opportunities.address_branch_id
WHERE address_branch.branch_id = 3216
and address_branch.address_id = addresses.id
and address_branch.branch_id = branches.id

/**************************************************************************************/
/****************** Select all branches with managers and MM's ************************/
/**************************************************************************************/


select branches.id, branchname, branches.street, branches.city, branches.state, branches.zip, concat_ws(" ", a.firstname,a.firstname) as BM, concat_ws(" ", m.firstname,m.firstname) as MM
from branches, branch_person, persons a, persons m
where branches.id = branch_person.branch_id
and branch_person.role_id = 9
and branch_person.person_id = a.id
and a.reports_to = m.id

/**************************************************************************************/
/****** Move all activities, opportunities and leads from one branch to another *******/
/**************************************************************************************/

update activities set branch_id = newid where branch_id = oldid;
update opportunities set branch_id = newid where branch_id = oldid;
update address_branch set branch_id = newid where branch_id = oldid;


/************************************************************************************/

select branches.branchname, concat_ws(' ', b.firstname, b.lastname) as bm, concat_ws(" ", m.firstname, m.lastname) as MM, companyname,address_branch.status_id,opportunities.id,opportunities.closed, opportunities.value
from companies, addresses, branches, branch_person, persons m, persons b, address_branch
left join opportunities on address_branch.id = opportunities.address_branch_id
where companies.id in (45,61,68,73,75,90,114,212,223,244,259,325,388,407,441,460,490,492,493,532,1208,1344,1355,1356,1357)
and companies.id = addresses.company_id
and addresses.id = address_branch.address_id
and address_branch.branch_id = branches.id
and branches.id = branch_person.branch_id
and branch_person.role_id = 9
and branch_person.person_id = b.id
and b.reports_to = m.id

/**************************************************************************/
/************************** Select duplicates from branch *****************/
/**************************************************************************/
select * from addresses, address_branch 
where address_branch.branch_id = 2255 
and addresses.id = address_branch.address_id 
and addresses.position in (
  select b.position from ( 
    select a.position, count(a.id) 
    from addresses a, address_branch 
    where address_branch.branch_id =2255 
    and address_branch.address_id = a.id 
    group by a.position having count(a.id) >1) b
  ) 
order by position
//***************************************************************
/************** Select deleted / non confirmed people and branch **********/
SELECT concat_ws(' ', firstname, lastname) as name, persons.id as PID, branchname, roles.name as role
FROM users, persons, branch_person, branches, roles
where (users.deleted_at is not null or users.confirmed !=1)
and users.id = persons.user_id
and persons.id = branch_person.person_id
and branch_person.role_id = roles.id
and branch_person.branch_id = branches.id

/****************************************************************
/********** delete selection above *******************************
/****************************************************************
delete from branch_person where person_id in (select * from (SELECT persons.id as PID
FROM users, persons, branch_person b
where (users.deleted_at is not null or users.confirmed !=1)
and users.id = persons.user_id
and persons.id = b.person_id) a )

/******************************************************************
/************  New Campaign Aggregation Query *********************
/******************************************************************
SELECT branchname,
COUNT(CASE WHEN address_branch.status_id = 1  then 1 END) as offeredleads,
COUNT(CASE WHEN address_branch.status_id = 1  and address_branch.created_at between '2020-03-13' and '2020-04-31' then 1 END) as newleads,
COUNT(CASE WHEN address_branch.status_id = 2  then 1 END) as workedleads,
COUNT(CASE WHEN address_branch.status_id = 3  then 1 END) as rejectedleads,
COUNT(CASE WHEN opportunities.id is not null and opportunities.closed = 0 and opportunities.created_at  < '2020-03-13' then 1 END) as campaignopenopportunities,
COUNT(CASE WHEN opportunities.id is not null and opportunities.closed = 0 and opportunities.created_at  between '2020-03-13' and '2020-04-21' then 1 END) as campaignnewopportunities,
COUNT(CASE WHEN opportunities.id is not null and opportunities.closed = 1 and opportunities.actual_close  between '2020-03-13' and '2020-04-21'then 1 END) as campaignwonopportunities,
SUM(CASE WHEN opportunities.id is not null and opportunities.closed = 0 and opportunities.created_at  between '2020-03-13' and '2020-04-21' then opportunities.value else 0 END) as campaignnewopportunitiesvalue,
SUM(CASE WHEN opportunities.id is not null and opportunities.closed = 1 and opportunities.actual_close  between '2020-03-13' and '2020-04-21'then opportunities.value else 0 END) as campaignwonopportunitiesvalue

from branches, addresses, address_branch
left join opportunities on address_branch.id = opportunities.address_branch_id
where address_branch.address_id = addresses.id
and addresses.company_id in 
(41,43,45,61,68,72,73,74,75,76,81,99,102,120,160,223,239,240,243,244,259,291,315,325,342)
and address_branch.branch_id = branches.id
group by branchname
/****************************************************************
/*********************  Add leads of orphaned activites back
/****************************************************************
insert into address_branch (address_id, branch_id, created_at, note, status_id) 
select activities.address_id, activities.branch_id, min(activities.created_at),'restored 3-24-2020', 2 
from activities 
left join address_branch on activities.address_id = address_branch.address_id 
and activities.branch_id = address_branch.branch_id 
where activities.branch_id is not null
and address_branch.id is null group by activities.address_id, activities.branch_id
/******************************************************************
/*********************************************/
/************ Purge daily terminations *******/
/*********************************************/
update users set users.confirmed = 0 where users.id in (select * from (SELECT users.id FROM `purge_employee`, users
WHERE purge_employee.employee_id = users.employee_id) a)

/******************************************* /
List all BM's who have more than one branch
/*****************************************
SELECT
    CONCAT_WS(' ', firstname, lastname) AS manager,
    branchname
FROM
    persons,
    branch_person,
    branches
WHERE
    persons.id = branch_person.person_id AND branch_person.branch_id = branches.id AND persons.id IN
    (SELECT
     person
        FROM
            (
            SELECT
                person_id AS person,
                COUNT(branch_id) AS branches
            FROM
                branch_person,
                persons
            WHERE
                role_id = 9 AND persons.id = branch_person.person_id AND persons.deleted_at IS NULL
            GROUP BY
                person_id
            HAVING
                branches > 1
        ) AS a )

/**************************************
SELECT persons.id, CONCAT_WS(' ', firstname, lastname), businessname, activity_date, activities.branch_id AS activity_branch, address_branch.branch_id AS lead_branch 
FROM persons, activities, address_branch, addresses 
WHERE persons.user_id = activities.user_id 
AND activities.address_id = address_branch.address_id 
AND activities.branch_id != address_branch.branch_id 
AND address_branch.updated_at < activities.activity_date 
AND activities.activity_date > '2020-10-01' 
AND address_branch.address_id = addresses.id
/**************************************************************
/* Extract leads for person (Now in PersonData Export)
/**************************************************************
SELECT
    CONCAT_WS(
        ' ',
        persons.firstname,
        persons.lastname
    ) AS sr,
    addresses.id,
    addresses.businessname,
    addresses.street,
    addresses.address2,
    addresses.city,
    addresses.state,
    addresses.zip,
    addresses.phone,
    addresses.contact,
    addresses.description,
    addresses.created_at,
    addresses.updated_at,
    opportunities.branch_id,
    opportunities.closed,
    opportunities.Top25,
    opportunities.value,
    opportunities.requirements,
    opportunities.duration,
    opportunities.description,
    opportunities.comments,
    opportunities.created_at,
    opportunities.updated_at,
    opportunities.title,
    opportunities.expected_close,
    opportunities.actual_close,
    opportunities.csp,
    contacts.fullname,
    contacts.title,
    contacts.email,
    contactphone,
    contacts.comments
FROM
    persons,
    addresses
LEFT JOIN opportunities ON addresses.id = opportunities.address_id
LEFT JOIN contacts ON addresses.id = contacts.address_id
WHERE
    persons.id IN(3686, 4008) AND persons.user_id = addresses.user_id
ORDER BY
    sr

//*************************** Get Market Managers email and full name
$marketmanagers = App\Person::whereNull('deleted_at')
->managers([3])
->join('users', 'persons.user_id', '=', 'users.id')
  ->selectRaw("persons.id, concat_ws(' ',firstname, lastname) as fullName, users.email")
  ->get();
  /********************************************************
  relabel activities to branch
*************/
  update activities, persons, branch_person set activities.bid = branch_person.branch_id where activities.bid is null and activities.user_id = persons.user_id and persons.id = branch_person.person_id and branch_person.role_id =9 and persons.deleted_at is null

  update activities, branches 
set activities.branch_id = branches.id
where activities.bid = branches.branch_id
/************************************************** 
Get Branch Leads by State Count 
*************/
$locations = App\AddressBranch::selectRaw('count(addresses.id), addresses.state')
  ->join('addresses', 'address_branch.address_id', '=', 'addresses.id')
  ->where('branch_id', 1580)
  ->groupBy('state')
  ->get();
  /*****************************************************************

Get Company addresses with ditance from location
*************/
  SELECT companyname, businessname,street,city, state, zip, ST_Distance_Sphere(
    point(-87.763, 41.878),
    point(lng, lat)
)* .000621371192 as distance
from companies, addresses
where addresses.company_id = companies.id
and ST_Distance_Sphere(
    point(-87.763, 41.878),
    point(lng, lat)
)* .000621371192 < 100
and companies.id not in (512,514)
order by companyname ASC, distance DESC